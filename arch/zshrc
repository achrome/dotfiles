# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export DOTFILES=$HOME/dotfiles
export ZSH=$DOTFILES/arch/zsh
export TERM=xterm-256color

echo "\e[1;4;33m\x0aLoading shell configuration\e[0m\n"

### Antigen Configuration
source <(antibody init)
antibody bundle < $ZSH/bundle.txt
echo "\e[32mAntibody \u2714\e[0m"

for file in $ZSH/*.zsh
do
  source "$file"
done

### Version Managers
# Groovy, grails and others goodies
# export SDKMAN_DIR="$HOME/.sdkman" && source "$HOME/.sdkman/bin/sdkman-init.sh"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
nvm use default --silent
[[ -s "/home/achrome/.gvm/scripts/gvm" ]] && source "/home/achrome/.gvm/scripts/gvm"
eval "$(pyenv init -)"
pyenv shell 3.10.0
eval "$(pyenv virtualenv-init -)"
pyenv virtualenvwrapper

### OPAM
. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
echo "\e[32mVersion managers \u2714\e[0m"

### ls fix
eval `dircolors $HOME/.dircolors`
echo "\e[32mFixed\e[0m \e[33mls colors\e[0m \e[32m\u2714\e[0m"

## Use default versions from different VMs
echo "\e[32mLanguage defaults \u2714\e[0m"

### System information
echo "\n\e[1;4;32mShell configuration \u2713\u2713.\e[0m\n"
echo "\e[1;4;32mSystem Details\e[0m\n"
echo "\e[35mOS              :\e[0m $(uname -o)"
echo "\e[35mNode            :\e[0m $(uname -n)"
echo "\e[35mKernel Release  :\e[0m $(uname -r)"
echo "\e[35mKernel Version  :\e[0m $(uname -v)"
echo "\e[35mProcessor       :\e[0m $(uname -o)"
echo "\e[35mShell           :\e[0m $($SHELL --version)"
echo "\n"

echo "\e[1;4;32mLanguages\e[0m\n"
echo "\e[35mErlang      :\e[0m $(cat $(dirname $(dirname `which erl`)/$(readlink `which erl`))/../releases/*/OTP_*)"
echo "\e[35mGCC         :\e[0m $(gcc -dumpversion)"
echo "\e[35mG++         :\e[0m $(g++ -dumpversion)"
echo "\e[35mGolang      :\e[0m $(go version | awk '{ gsub(/go/, ""); print $2 }')"
echo "\e[35mHaskell     :\e[0m $(ghc --numeric-version)"
echo "\e[35mJava        :\e[0m $(java -version 2>&1 | awk 'NR == 1 { gsub(/"/,""); print $3 }')"
echo "\e[35mJulia       :\e[0m $(julia --version | awk '{ print $3 }')"
echo "\e[35mOCamL       :\e[0m $(ocaml -version | awk '{ print $5 }')"
echo "\e[35mPHP         :\e[0m $(php -r 'echo phpversion();' | sed 's/-.*$//g')"
echo "\e[35mPython      :\e[0m $(python -V | awk '{ print $2 }')"
echo "\e[35mRuby        :\e[0m $(ruby -v | awk '{ print $2 }')"
echo "\e[35mRust        :\e[0m $(rustc --version | awk '{ print $2 }')"
echo "\e[35mScala       :\e[0m $(scala -version 2>&1 | awk '{ print $5 }')"
echo "\n"

echo "\e[1;4;32mDatabases\e[0m\n"
# echo "\e[35mMongo       :\e[0m $(mongo --version | awk 'NR == 1 { print $4 }')"
echo "\e[35mPostGRE     :\e[0m $(pg_config --version | awk '{ print $2 }')"
echo "\e[35mMySQL       :\e[0m $(mysql --version | awk -v start=2 -v end=5 '{ for (i=start;i<=end;i++) printf("%s%s", $i, (i==end) ? "\n": OFS) }' | sed 's/,//')"
echo "\n"

echo "\e[1;4;32mTools\e[0m\n"
echo "\e[35mApache      :\e[0m $(apachectl -V | awk 'NR == 1 { print $3 }' | sed 's/Apache\///')"
echo "\e[35mNGinX       :\e[0m $(nginx -v 2>&1 | sed 's/^.*\///')"
echo "\e[35mHAProxy     :\e[0m $(haproxy -v | awk 'NR == 1 { print $3 }')"
echo "\e[35mGit         :\e[0m $(/usr/bin/git --version | sed 's/git version //')"
echo "\e[35mRedis       :\e[0m $(redis-server --version | awk '{ gsub(/v=/, ""); print $3 }')"
echo "\e[35mDocker      :\e[0m $(docker --version | awk '{ print $3 }' | sed 's/,//')"

echo "\n\e[1;4;32mGreetings \e[0;1;4;33m$USER.\e[0m"

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -f ~/dotfiles/zsh/fzf.zsh ] && source ~/dotfiles/zsh/fzf.zsh
[ -f /etc/profile.d/emscripten.sh ] && source /etc/profile.d/emscripten.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
